#!/usr/bin/env python
# encoding: utf-8

# Copyright (c) 2019, Battelle Memorial Institute
#
# Battelle Memorial Institute (hereinafter Battelle) hereby grants permission to
# any person or entity lawfully obtaining a copy of this software and associated
# documentation files (hereinafter “the Software”) to redistribute and use the
# Software in source and binary forms, with or without modification.  Such
# person or entity may use, copy, modify, merge, publish, distribute,
# sublicense, and/or sell copies of the Software, and may permit others to do
# so, subject to the following conditions:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimers.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Other than as used herein, neither the name Battelle Memorial Institute or
#    Battelle may be used in any form whatsoever without the express written
#    consent of Battelle.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL BATTELLE OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


def build(bld):
    tools_deps = ['project-headers', 
                  'libtrng', 'OpenMP', 'nlohmann_json', 'cli11']

    cuda_acc_tools_deps = tools_deps
    cuda_acc_cxx_flags = []
    if bld.env.ENABLE_CUDA:
        cuda_acc_tools_deps = tools_deps + ['cuda_ripples']
        cuda_acc_cxx_flags = ['-DRIPPLES_ENABLE_CUDA']

        bld(features='cxx cxxstlib',
            source=['cuda/from_nvgraph/imm/bfs.cu'],
            target='cuda_imm_bfs', cuda=True,
            use=tools_deps + ['CUDA', 'CUDART', 'nvidia_cub'])


        bld(features='cxx cxxstlib',
            source=['cuda/from_nvgraph/hc/bfs.cu'],
            target='cuda_hc_bfs', cuda=True,
            use=tools_deps + ['CUDA', 'CUDART', 'nvidia_cub'])

        bld(features='cxx cxxstlib',
            source=['cuda/cuda_utils.cu', 'cuda/cuda_generate_rrr_sets.cu',
                    'cuda/find_most_influential.cu',
                    'cuda/cuda_lt_kernel.cu', 'cuda/cuda_graph.cu',
                    'cuda/cuda_hc_engine.cu'],
            target='cuda_ripples', cuda=True,
            use=tools_deps + ['CUDA', 'CUDART', 'nvidia_cub'])

    if bld.env.ENABLE_MEMKIND:
        cuda_acc_tools_deps += ['memkind']
        cuda_acc_cxx_flags += ['-DENABLE_MEMKIND=1']

    bld(features='cxx cxxprogram', source='imm.cc', target='imm',
        use=cuda_acc_tools_deps + ['cuda_imm_bfs'], cuda=bld.env.ENABLE_CUDA,
        cxxflags=cuda_acc_cxx_flags)

    bld(features='cxx cxxprogram', source='oimm.cc', target='oimm',
        use=cuda_acc_tools_deps + ['cuda_imm_bfs'], cuda=bld.env.ENABLE_CUDA,
        cxxflags=cuda_acc_cxx_flags)

    # bld(features='cxx cxxprogram', source='louvain-imm.cc', target='louvain-imm',
    #     use=tools_deps)

    bld(features='cxx cxxprogram', source='simulator.cc', target='simulator',
        use=tools_deps)

    bld(features='cxx cxxprogram', source='dump-graph.cc', target='dump-graph',
        use=tools_deps)

    bld(features='cxx cxxprogram', source='hill_climbing.cc', target='hill-climbing',
        use=cuda_acc_tools_deps + ['cuda_hc_bfs'], cxxflags=cuda_acc_cxx_flags, cuda=bld.env.ENABLE_CUDA)

    if not bld.env.HAVE_MPI:
        return

    tools_deps += ['MPI']
    cuda_acc_tools_deps += ['MPI']
    bld(features='cxx cxxprogram', source='mpi-hill-climbing.cc', target='mpi-hill-climbing',
        use=cuda_acc_tools_deps + ['cuda_hc_bfs'], cxxflags=cuda_acc_cxx_flags, cuda=bld.env.ENABLE_CUDA)

    bld(features='cxx cxxprogram', source='mpi-imm.cc', target='mpi-imm',
        use=cuda_acc_tools_deps + ['cuda_imm_bfs'], cuda=bld.env.ENABLE_CUDA,
        cxxflags=cuda_acc_cxx_flags)
