#! /usr/bin/env python
# encoding: utf-8

# Copyright (c) 2019, Battelle Memorial Institute
#
# Battelle Memorial Institute (hereinafter Battelle) hereby grants permission to
# any person or entity lawfully obtaining a copy of this software and associated
# documentation files (hereinafter “the Software”) to redistribute and use the
# Software in source and binary forms, with or without modification.  Such
# person or entity may use, copy, modify, merge, publish, distribute,
# sublicense, and/or sell copies of the Software, and may permit others to do
# so, subject to the following conditions:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimers.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Other than as used herein, neither the name Battelle Memorial Institute or
#    Battelle may be used in any form whatsoever without the express written
#    consent of Battelle.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL BATTELLE OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


def build(bld):
    bld(features='cxx cxxstlib',
        source='test_main.cc',
        target='test_main',
        use=['catch2'])

    tests = ['pivoting.cc', 'community_extraction.cc']
    bld(features='cxx cxxprogram test',
        source=tests,
        target='run_tests',
        use=['project-headers', 'libtrng', 'OpenMP', 'nlohmann_json', 'spdlog', 'catch2', 'test_main'])

    bld(features='cxx cxxprogram test',
        source='rrr_set_generation.cc',
        target='rrr_set_generation_tests',
        use=['project-headers', 'libtrng', 'OpenMP', 'nlohmann_json', 'CLI11', 'spdlog', 'catch2', 'test_main'])

    if bld.env.ENABLE_CUDA:
        bld(features='cxx cxxprogram test',
            source='cuda_find_most_influential.cc',
            target='cuda_seed_select',
            use=['project-headers', 'libtrng', 'OpenMP', 'nlohmann_json', 'CLI11', 'spdlog', 'catch2', 'test_main']
            + ['cuda_ripples', 'CUDA', 'CUDART'],
            cxxflags='-DRIPPLES_ENABLE_CUDA')
